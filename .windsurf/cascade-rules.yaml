# --- existing rules (kept as-is) ---
cascadeRules:
  - name: "Service Scaffold Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "service"
    actions:
      - createTask:
          component: "${component}"
          description: "Scaffold ${component} service (http skeleton, Dockerfile, health, metrics)"
          priority: "high"
          labels: ["scaffold", "service", "backend"]
      - createTask:
          component: "observability"
          description: "Add /health & /metrics + Prometheus scrape config for ${component}"
          priority: "high"
          labels: ["observability", "monitoring", "prometheus"]
      - createTask:
          component: "documentation"
          description: "Generate ADR stub and update README for ${component}"
          priority: "medium"
          labels: ["documentation", "adr"]
      - createTask:
          component: "git"
          description: "Create branch and commit scaffold setup for ${component}"
          priority: "medium"
          labels: ["git", "branch", "commit"]
    labels: ["scaffold", "auto-generated"]
    dependencies:
      - "service scaffold must succeed first"

  - name: "API Endpoint Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        descriptionContains: "/api/"
    actions:
      - createTask:
          component: "test"
          description: "Write unit tests for new API endpoints"
          priority: "high"
          labels: ["test", "api", "unittest"]
      - createTask:
          component: "documentation"
          description: "Document new API endpoints in docs"
          priority: "medium"
          labels: ["documentation", "api-docs"]
    labels: ["api", "test", "docs"]
    dependencies:
      - "descriptionMustExist"

  - name: "Observability Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "observability"
    actions:
      - createTask:
          component: "prometheus"
          description: "Add Prometheus scrape config for new target ${component}"
          priority: "high"
          labels: ["monitoring", "prometheus", "scrape"]
      - createTask:
          component: "grafana"
          description: "Add dashboard panel for ${component}"
          priority: "medium"
          labels: ["monitoring", "grafana", "dashboard"]
    labels: ["monitoring", "auto-generated"]
    dependencies:
      - "observability scaffold must exist"

  - name: "Documentation Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "documentation"
    actions:
      - createTask:
          component: "adr"
          description: "Generate ADR for architectural decision in ${component}"
          priority: "medium"
          labels: ["adr", "architecture"]
      - createTask:
          component: "readme"
          description: "Update README.md with ${component} changes"
          priority: "medium"
          labels: ["readme", "documentation"]
    labels: ["docs", "auto-generated"]

  - name: "Git Workflow Cascade"
    trigger:
      whenTool: "task-master.task_create"
    condition:
      component: "git"
    actions:
      - createTask:
          component: "branch"
          description: "Create feature branch for ${component} work"
          priority: "high"
          labels: ["git", "branch"]
      - createTask:
          component: "commit"
          description: "Commit ${component} changes with conventional format"
          priority: "medium"
          labels: ["git", "commit"]
          metadata:
            git:
              commitMessageGuidance:
                requiresDescriptiveSummary: true
                summaryField: "descriptive_summary"
                summaryTemplate: "Provide a descriptive summary of ${component} changes"
                styleGuide: "Use present tense, highlight primary impact, limit to 72 characters"
      - createTask:
          component: "commit-validation"
          description: "Validate descriptive summary commit for ${component}"
          priority: "medium"
          labels: ["git", "commit", "validation"]
          metadata:
            git:
              validation:
                requiresSummaryCheck: true
                summaryField: "descriptive_summary"
                checklist:
                  - "Confirm commit exists with descriptive summary"
                  - "Ensure summary text is copied into release notes tracker"
      - createTask:
          component: "pr"
          description: "Create PR with proper labels and ADR references"
          priority: "low"
          labels: ["git", "pr"]
    labels: ["git", "workflow"]

  - name: "Testing Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "test"
    actions:
      - createTask:
          component: "unittest"
          description: "Write unit tests for ${component}"
          priority: "high"
          labels: ["test", "unittest"]
      - createTask:
          component: "integration"
          description: "Write integration tests for ${component}"
          priority: "medium"
          labels: ["test", "integration"]
      - createTask:
          component: "e2e"
          description: "Write end-to-end tests for ${component}"
          priority: "low"
          labels: ["test", "e2e"]
    labels: ["test", "auto-generated"]

  - name: "Security Review Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "security"
    actions:
      - createTask:
          component: "audit"
          description: "Security audit for ${component}"
          priority: "high"
          labels: ["security", "audit"]
      - createTask:
          component: "vulnerability"
          description: "Vulnerability assessment for ${component}"
          priority: "high"
          labels: ["security", "vulnerability"]
      - createTask:
          component: "compliance"
          description: "Compliance check for ${component}"
          priority: "medium"
          labels: ["security", "compliance"]
    labels: ["security", "auto-generated"]

  - name: "Performance Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "performance"
    actions:
      - createTask:
          component: "benchmark"
          description: "Performance benchmark for ${component}"
          priority: "high"
          labels: ["performance", "benchmark"]
      - createTask:
          component: "profiling"
          description: "Profiling analysis for ${component}"
          priority: "medium"
          labels: ["performance", "profiling"]
      - createTask:
          component: "optimization"
          description: "Performance optimization for ${component}"
          priority: "medium"
          labels: ["performance", "optimization"]
    labels: ["performance", "auto-generated"]

  - name: "Database Migration Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "database"
    actions:
      - createTask:
          component: "schema"
          description: "Design database schema for ${component}"
          priority: "high"
          labels: ["database", "schema"]
      - createTask:
          component: "migration"
          description: "Create migration scripts for ${component}"
          priority: "high"
          labels: ["database", "migration"]
      - createTask:
          component: "seed"
          description: "Create seed data for ${component}"
          priority: "medium"
          labels: ["database", "seed"]
    labels: ["database", "auto-generated"]

  - name: "Container Deployment Cascade"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        component: "deployment"
    actions:
      - createTask:
          component: "dockerfile"
          description: "Create Dockerfile for ${component}"
          priority: "high"
          labels: ["deployment", "dockerfile"]
      - createTask:
          component: "compose"
          description: "Update docker-compose.yml for ${component}"
          priority: "high"
          labels: ["deployment", "compose"]
      - createTask:
          component: "healthcheck"
          description: "Implement health check for ${component}"
          priority: "high"
          labels: ["deployment", "healthcheck"]
    labels: ["deployment", "auto-generated"]

# --- NEW: GitHub-first issue creation rules ---
  - name: "Documentation Issues (GitHub-only)"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        descriptionContains: "create issue"
    pre:
      - tool: "github.ensure_labels"
        with:
          labels: ["documentation", "architecture", "data-flow", "observability", "deployment"]
    actions:
      - tool: "github.create_issue"
        with:
          title: "${task.title}"
          body: "${task.description}"
          labels: ["documentation"]
    post:
      - tool: "github.comment_issue"
        with:
          number: "${result.number}"
          body: "Issue created by cascade rules. Labels ensured and policy enforced."

  - name: "Enforce remote issues (deny local markdown)"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        descriptionContains: "create issue"
    deny:
      when:
        config.enforce_remote_issues: true
      message: "Local markdown issue creation is disabled. Use github.create_issue."

# --- NEW: GitHub Issue Automation Rules ---

  - name: "Auto-Close Completed Tasks with GitHub Issues"
    trigger:
      whenTool: "task-master.task_complete"
      condition:
        descriptionContains: "github"
    actions:
      - tool: "github.comment_issue"
        with:
          number: "${task.github_issue_number}"
          body: "âœ… **TASK COMPLETED**\n\nTask marked as complete. Closing associated GitHub issue."
      - tool: "github.close_issue"
        with:
          number: "${task.github_issue_number}"
          reason: "completed"
    labels: ["automation", "github-sync"]

  - name: "Auto-Update Issue Progress for Development Tasks"
    trigger:
      whenTool: "task-master.task_update"
      condition:
        labelsAnyOf: ["ready-for-dev", "p1-high", "p2-medium", "p3-low", "enhancement", "bug", "feature"]
        descriptionContains: "progress"
    actions:
      - tool: "github.comment_issue"
        with:
          number: "${task.github_issue_number}"
          body: "ðŸ”„ **PROGRESS UPDATE**\n\nTask status updated. Development work in progress."
    labels: ["automation", "github-sync"]

  - name: "Auto-Create GitHub Issue for New Development Tasks"
    trigger:
      whenTool: "task-master.task_create"
      condition:
        labelsAnyOf: ["ready-for-dev", "p1-high", "p2-medium", "p3-low", "enhancement", "bug", "feature"]
    pre:
      - tool: "github.ensure_labels"
        with:
          labels: ["ready-for-dev", "automation"]
    actions:
      - tool: "github.create_issue"
        with:
          title: "Auto: ${task.title}"
          body: "${task.description}\n\n*Auto-created by cascade rules for development work.*"
          labels: ["ready-for-dev", "automation"]
    post:
      - tool: "task-master.task_update"
        with:
          task_id: "${task.id}"
          github_issue_number: "${result.number}"
    labels: ["automation", "github-sync"]

  - name: "Close GitHub issues when tasks complete"
    trigger:
      whenTool: "task-master.task_update"
      condition:
        statusEquals: "completed"
        metadataPath: "github.issue_number"
    actions:
      - tool: "github.comment_issue"
        with:
          number: "${task.metadata.github.issue_number}"
          body: "Task ${task.title} marked completed automatically by Task Master."
      - tool: "github.close_issue"
        with:
          number: "${task.metadata.github.issue_number}"
          reason: "completed"
    labels: ["github", "automation", "issue-triage"]

# --- global config stays as-is ---
globalConfig:
  maxConcurrentTasks: 10
  taskTimeoutMinutes: 60
  retryFailedTasks: true
  maxRetries: 3
  notificationChannels: ["#freshpoc-dev"]

taskTemplates:
  serviceScaffold:
    type: "service"
    priority: "high"
    labels: ["scaffold", "service", "backend"]
    assignee: "${creator}"
    metadata:
      template: "service-scaffold"

  observabilityTask:
    type: "observability"
    priority: "high"
    labels: ["monitoring", "prometheus", "grafana"]
    assignee: "${creator}"
    metadata:
      template: "observability"

  documentationTask:
    type: "documentation"
    priority: "medium"
    labels: ["docs", "readme", "adr"]
    assignee: "${creator}"
    metadata:
      template: "documentation"

securityConstraints:
  maxTasksPerHour: 100
  maxTasksPerUser: 50
  requireApprovalFor:
    - "database"
    - "security"
    - "deployment"
  blockedComponents: []
