version: '3.8'

# FreshPOC Infrastructure Stack
# This compose file sets up the complete observability and data platform
# for the FreshPOC project using Podman-compatible configuration

services:
  # ========================================
  # MESSAGE QUEUE & STREAMING
  # ========================================

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: freshpoc-kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_METRICS: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - freshpoc-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: freshpoc-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freshpoc-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: freshpoc-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - freshpoc-network

  # ========================================
  # GRAPH DATABASE
  # ========================================

  dgraph-zero:
    image: dgraph/dgraph:v23.0.0
    container_name: freshpoc-dgraph-zero
    ports:
      - "5080:5080"
      - "6080:6080"
    command: dgraph zero --my=dgraph-zero:5080
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - freshpoc-network

  dgraph-alpha:
    image: dgraph/dgraph:v23.0.0
    container_name: freshpoc-dgraph-alpha
    ports:
      - "8081:8080"
      - "9080:9080"
    command: dgraph alpha --my=dgraph-alpha:7080 --zero=dgraph-zero:5080 --security "whitelist=0.0.0.0/0"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      dgraph-zero:
        condition: service_healthy
    networks:
      - freshpoc-network

  # ========================================
  # VECTOR DATABASE
  # ========================================

  weaviate:
    image: semitechnologies/weaviate:1.21.2
    container_name: freshpoc-weaviate
    ports:
      - "8082:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: ''
      CLUSTER_HOSTNAME: 'node1'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/meta || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - freshpoc-network

  # ========================================
  # OBJECT STORAGE
  # ========================================

  minio:
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    container_name: freshpoc-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: freshpoc-admin
      MINIO_ROOT_PASSWORD: freshpoc-password
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - freshpoc-network

  # ========================================
  # LOG AGGREGATION
  # ========================================

  loki:
    image: grafana/loki:2.8.0
    container_name: freshpoc-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - freshpoc-network

  promtail:
    image: grafana/promtail:2.8.0
    container_name: freshpoc-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9080/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - freshpoc-network

  # ========================================
  # METRICS & MONITORING
  # ========================================

  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: freshpoc-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - freshpoc-network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: freshpoc-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: freshpoc-grafana
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - freshpoc-network

  # ========================================
  # WORKFLOW ORCHESTRATION
  # ========================================

  postgres:
    image: postgres:15-alpine
    container_name: freshpoc-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - freshpoc-network

  airflow-webserver:
    image: apache/airflow:2.7.0-python3.10
    container_name: freshpoc-airflow-webserver
    ports:
      - "8083:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__SECRET_KEY: freshpoc-secret-key
      AIRFLOW__CORE__FERNET_KEY: '46BKJoQYlPPOexq0OhkLRkj6gQ7rQKJBgm1326H6yacA='
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - freshpoc-network

  airflow-scheduler:
    image: apache/airflow:2.7.0-python3.10
    container_name: freshpoc-airflow-scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import airflow; print(\"Airflow imported successfully\")'"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        condition: service_healthy
    networks:
      - freshpoc-network

  # ========================================
  # REDIS (for caching and coordination)
  # ========================================

  redis:
    image: redis:7-alpine
    container_name: freshpoc-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - freshpoc-network

# ========================================
# NETWORKS
# ========================================

networks:
  freshpoc-network:
    driver: bridge
    name: freshpoc-network

# ========================================
# VOLUMES
# ========================================

volumes:
  postgres-data:
    name: freshpoc-postgres-data
  grafana-data:
    name: freshpoc-grafana-data
  redis-data:
    name: freshpoc-redis-data
  minio-data:
    name: freshpoc-minio-data
