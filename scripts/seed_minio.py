#!/usr/bin/env python3
import boto3
import os

def seed_minio():
    # MinIO configuration
    minio_endpoint = "http://localhost:9000"
    access_key = "admin"
    secret_key = "adminadmin"
    bucket_name = "fresh-reports"
    
    # Create S3 client for MinIO
    s3_client = boto3.client(
        's3',
        endpoint_url=minio_endpoint,
        aws_access_key_id=access_key,
        aws_secret_access_key=secret_key,
        region_name='us-east-1'
    )
    
    try:
        # Create bucket if it doesn't exist
        s3_client.create_bucket(Bucket=bucket_name)
        print(f"Created bucket: {bucket_name}")
    except s3_client.exceptions.BucketAlreadyOwnedByYou:
        print(f"Bucket {bucket_name} already exists")
    except Exception as e:
        print(f"Error creating bucket: {e}")
        return
    
    # Sample file content
    sample_content = """# FreshPoC Sample Report

## Overview
This is a sample report generated by the FreshPoC data platform.

## Data Model
- **Repository**: jaffle-shop-classic
- **Type**: dbt project
- **Entities**: Customer, Orders, Products

## Graph Structure
```mermaid
graph TD
    A[Repository: jaffle-shop-classic] --> B[DataModel: customer_orders]
    B --> C[Entity: Customer]
    B --> D[Entity: Orders]
    B --> E[Entity: Products]
```

## Status
✅ Report generation successful
✅ Data ingestion complete
✅ Graph database updated
"""
    
    # Upload sample file
    try:
        s3_client.put_object(
            Bucket=bucket_name,
            Key="sample-report.md",
            Body=sample_content,
            ContentType="text/markdown"
        )
        print("Uploaded sample report to MinIO")
        
        # List objects in bucket
        response = s3_client.list_objects_v2(Bucket=bucket_name)
        if 'Contents' in response:
            print(f"Files in bucket '{bucket_name}':")
            for obj in response['Contents']:
                print(f"  - {obj['Key']} ({obj['Size']} bytes)")
        
    except Exception as e:
        print(f"Error uploading file: {e}")

if __name__ == "__main__":
    seed_minio()
